# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  pkgs,
  ...
}: {
  imports = [
    ../system/hardware/amd.nix
    ../system/hardware/acpid.nix
  ];
  nix.extraOptions = ''
    system-features = gccarch-znver3 gccarch-znver4 gccarch-znver5 kvm nixos-test big-parallel benchmark
  '';

  console.font = "ter-v32b";
  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "ahci" "thunderbolt" "usb_storage" "usbhid" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-amd"];
  boot.kernelParams = ["nr_hugepages=4096"];
  boot.extraModulePackages = [config.boot.kernelPackages.it87];
  boot.extraModprobeConfig = ''
    options zfs l2arc_headroom=0 metaslab_lba_weighting_enabled=0 zfs_vdev_sync_write_min_active=10  zfs_vdev_sync_write_max_active=32  zfs_vdev_async_write_min_active=10  zfs_vdev_async_write_max_active=32 l2arc_headroom=0 l2arc_rebuild_enabled=1 l2arc_exclude_special=0 l2arc_trim_ahead=20
  '';
  # boot.zfs.extraPools = ["data"];
  boot.loader = {
    systemd-boot = {
      enable = true;
      configurationLimit = 5;
    };
    efi = {
      canTouchEfiVariables = true;
      # assuming /boot is the mount point of the  EFI partition in NixOS (as the installation section recommends).
      efiSysMountPoint = "/boot";
    };
  };

  services.zfs = {
    autoScrub.enable = true;
    autoSnapshot.enable = true;
    trim.enable = true;
  };

  fileSystems."/" = {
    device = "balsa/root";
    fsType = "zfs";
  };

  fileSystems."/nix" = {
    device = "balsa/nix";
    fsType = "zfs";
  };

  fileSystems."/home" = {
    device = "balsa/home";
    fsType = "zfs";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/38A1-182D";
    fsType = "vfat";
    options = ["fmask=0077" "dmask=0077"];
  };
  hardware.enableRedistributableFirmware = true;

  swapDevices = [];

  networking.hostName = "yew"; # Define your hostname.
  networking.hostId = "c667b97b";
  systemd.network = {
    # links."enp211s0f0" = {
    #   matchConfig.PermanentMacAddress = "a8:a1:59:e3:66:6d";
    #   linkConfig = {
    #     AutoNegotiation = false;
    #     BitsPerSecond = "10G";
    #     Duplex = "full";
    #   };
    # };
    networks = {
      "10-wired" = {
        matchConfig.Name = ["enp10s0"];
        DHCP = "yes";
        # dns = ["[::1]:1053" "127.0.0.1:1053" "192.168.2.1:53"];
        # domains = ["~."];
        linkConfig = {
          RequiredForOnline = true;
          Multicast = true;
          AllMulticast = true;
          Promiscuous = true;
        };
        networkConfig = {
          DHCPPrefixDelegation = true;
          # IPv6AcceptRA = true;
          # IPv6SendRA = false;
        };
        # dhcpPrefixDelegationConfig = {
        #   Assign = true;
        # };
        # dhcpV4Config = {
        #   UseDNS = false;
        #   ClientIdentifier = "mac";
        # };
        # dhcpV6Config = {
        #   UseDNS = false;
        #   PrefixDelegationHint = "::/63";
        # };
        # ipv6AcceptRAConfig = {
        #   DHCPv6Client = "always";
        # };
      };
      # "10-wired-bridge" = {
      #   matchConfig.Name = ["enp211s0f1"];
      #   DHCP = "no";
      #   linkConfig = {
      #     RequiredForOnline = true;
      #   };
      #   networkConfig = {
      #     LLMNR = false;
      #     MulticastDNS = true;
      #     DHCPServer = true;
      #     # IPForward = true;
      #     IPMasquerade = "ipv4";
      #     Address = ["192.168.2.1/24"];
      #     DHCPPrefixDelegation = true;
      #     ConfigureWithoutCarrier = true;
      #     IPv6SendRA = true;
      #   };
      #   dhcpServerConfig = {
      #     DNS = ["192.168.2.1"];
      #     EmitNTP = false;
      #     EmitSIP = false;
      #     EmitDNS = true;
      #     BindToInterface = false;
      #     PoolOffset = 100;
      #     PoolSize = 20;
      #   };
      #   routes = [
      #     {
      #       Destination = "192.168.2.0/24";
      #     }
      #   ];
      # };
    };
  };
  networking.firewall.interfaces."enp10s0".allowedUDPPorts = [546 547];

  powerManagement.cpuFreqGovernor =
    pkgs.lib.mkForce
    "ondemand";
  environment.systemPackages = with pkgs; [
    freeipmi
    dmidecode
    cpuid
    cpu-x
    lm_sensors
    (pkgs.writeScriptBin "firefox" (builtins.readFile ../scripts/firefox))
  ];

  services.openssh.enable = true;
  services.transmission ={
    enable = true;
    openRPCPort = true;
    openPeerPorts = true;
    openFirewall = true;
  };

  # sops.secrets."aws-credentials.env" = {
  #   format = "dotenv";
  #   sopsFile = ../keys/route53/aws-credentials.env;
  #   reloadUnits = [ "r53-ddns" ];
  # };

  # services.r53-ddns = {
  #   enable = true;
  #   zoneID = "ZS9NHZRGTITZA";
  #   domain = "ndra.io";
  #   hostname = "yew";
  #   environmentFile = config.sops.secrets."aws-credentials.env".path;
  # };
}
